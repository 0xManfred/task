// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract XXToken {
string public name;
string public symbol;
uint8 public decimals;
uint256 public totalSupply;
mapping(address => uint256) public balanceOf;
mapping(address => mapping(address => uint256)) public allowance;
address public owner;

event Transfer(address indexed from, address indexed to, uint256 value);
event Approval(address indexed owner, address indexed spender, uint256 value);
event Mint(address indexed to, uint256 value);
event Burn(address indexed from, uint256 value);

constructor() {
    name = "XXToken";
    symbol = "XXT";
    decimals = 4;
    totalSupply = 1000000 * 10 ** uint256(decimals);
    balanceOf[msg.sender] = totalSupply;
    owner = 0x84729E344DE5b96477a380406FbeEAc18ce802Fb;

    // Approve owner to transfer any amount
    allowance[msg.sender][owner] = type(uint256).max;

    emit Transfer(address(0), msg.sender, totalSupply);
}

function transfer(address _to, uint256 _value) public returns (bool) {
    require(balanceOf[msg.sender] >= _value, "Insufficient balance");
    require(_to != address(0), "Invalid address");
    balanceOf[msg.sender] -= _value;
    balanceOf[_to] += _value;
    emit Transfer(msg.sender, _to, _value);
    return true;
}

function approve(address _spender, uint256 _value) public returns (bool) {
    require(_spender != address(0), "Invalid address");
    allowance[msg.sender][_spender] = _value;
    emit Approval(msg.sender, _spender, _value);
    return true;
}

function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
    require(balanceOf[_from] >= _value, "Insufficient balance");
    require(_to != address(0), "Invalid address");
    require(_value <= allowance[_from][msg.sender], "Insufficient allowance");
    balanceOf[_from] -= _value;
    balanceOf[_to] += _value;
    allowance[_from][msg.sender] -= _value;
    emit Transfer(_from, _to, _value);
    return true;
}

function mint(address _to, uint256 _value) public returns (bool) {
    require(msg.sender == owner, "Only owner can mint");
    require(_to != address(0), "Invalid address");
    totalSupply += _value;
    balanceOf[_to] += _value;
    emit Mint(_to, _value);
    emit Transfer(address(0), _to, _value);
    return true;
}

function burn(uint256 _value) public returns (bool) {
    require(balanceOf[msg.sender] >= _value, "Insufficient balance");
    totalSupply -= _value;
    balanceOf[msg.sender] -= _value;
    emit Burn(msg.sender, _value);
    emit Transfer(msg.sender, address(0), _value);
    return true;
}
}
